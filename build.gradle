plugins {
    id 'java'
    id 'war'
    id 'org.flywaydb.flyway' version '9.8.1'

}

import javax.xml.parsers.DocumentBuilderFactory
import org.apache.tools.ant.taskdefs.Zip
import java.security.MessageDigest
import java.nio.file.Files
import java.nio.charset.StandardCharsets
import java.util.Base64

configurations {
    antOptional
}

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.9.2'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

dependencies {
    compileOnly('jakarta.json:jakarta.json-api:2.1.1')
    compileOnly('jakarta.enterprise:jakarta.enterprise.cdi-api:4.0.1')
    compileOnly('jakarta.validation:jakarta.validation-api:3.0.0')
    compileOnly('jakarta.ejb:jakarta.ejb-api:4.0.0')
    compileOnly('jakarta.faces:jakarta.faces-api:4.0.1')
    compileOnly('jakarta.servlet:jakarta.servlet-api:5.0.0')
    implementation 'jakarta.platform:jakarta.jakartaee-web-api:10.0.0'
    implementation 'org.glassfish:jakarta.faces:4.0.1'
    implementation 'org.projectlombok:lombok:1.18.28'
    implementation platform('org.hibernate.orm:hibernate-platform:6.3.1.Final')
    implementation 'org.hibernate.orm:hibernate-core'
    implementation 'jakarta.transaction:jakarta.transaction-api'
    implementation 'org.postgresql:postgresql:42.6.0'
    implementation('org.glassfish.jaxb:jaxb-runtime:3.0.2')
    implementation('org.primefaces:primefaces:13.0.3:jakarta')
    implementation('com.google.code.gson:gson:2.10.1')


    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")}

test {
    useJUnitPlatform()
}

flyway {
    locations = ["filesystem:./sql/migrations"]
    url = "jdbc:postgresql://helios.cs.ifmo.ru:5432/studs"
    user = "s367900"
    password = "NHuAaqTUhW4OskIS"
    schemas = ['public']
}
flywayMigrate.dependsOn(classes)

tasks.register('compile') {
    group = 'build'
    description = 'Compilation of the project source code'
    dependsOn 'compileJava'
    doLast {
        tasks.withType(JavaCompile).configureEach {
            options.compilerArgs << "-Xlint:deprecation"
        }
    }
}

tasks.register('build_task') {
    group = 'build'
    description = 'Building the project and packing it into an executable Jar archive'
    dependsOn 'compile'
    finalizedBy 'jar'
}

tasks.register('clean_task') {
    group = 'build'
    description = 'Deleting all temporary files and compiled classes'
    dependsOn 'clean'
    doLast {
        delete fileTree(dir: 'build', exclude: 'libs/')
    }
}

test {
    useJUnitPlatform()
    dependsOn 'build'
}

tasks.register('xml') {
    doLast {
        fileTree(dir: '.', include: '**/*.xml').each { file ->
            try {
                DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(file)
                println "${file} is valid."
            } catch (Exception e) {
                println "${file} is NOT valid. Reason: ${e.message}"
            }
        }
    }
}

//tasks.register('native2ascii') {
//    doLast {
//        fileTree(dir: '.', include: '**/*.properties').each { file ->
//            def outputFile = file("${buildDir}/native2ascii/${file.name}")
//            outputFile.parentFile.mkdirs()
//            exec {
//                commandLine 'native2ascii', '-encoding', 'UTF8', file.path, outputFile.path
//            }
//        }
//    }
//}

//tasks.register('history_task') {
//    doLast {
//        def result = exec {
//            commandLine 'gradle', 'compile'
//            ignoreExitValue true
//        }
//
//        while (result.exitValue != 0) {
//            exec {
//                commandLine 'git', 'checkout', 'HEAD~1'
//            }
//            result = exec {
//                commandLine 'gradle', 'compile'
//                ignoreExitValue true
//            }
//        }
//
//        if (result.exitValue != 0) {
//            exec {
//                commandLine 'git', 'diff', 'HEAD~1', '>', 'diff.txt'
//            }
//        }
//    }
//}

tasks.register ('history') {
    doLast {
        def success = false
        def diffResult = ""
        def outputStream
        def count =0
        def commit = 'HEAD'
        def prevCommit = commit + '^'
        try {
            exec {
                workingDir projectDir
                commandLine 'cmd', '/c', 'gradlew', 'compileJava'
            }
            success = true
        } catch (Exception e) {
            println "Compile error: ${e.message}"
            success = false
        }
        println "Compile result: $success"
        if (!success) {
            def diffFile = file("$buildDir/diff.txt")

            def successfullyLoaded = false

            while (!successfullyLoaded) {

                if(count ==0){
                    outputStream = new ByteArrayOutputStream()
                    exec {

                        commandLine 'git', 'diff'
                        workingDir projectDir
                        standardOutput = outputStream
                    }
                    diffResult = outputStream.toString()
                    count = 1
                    exec {
                        commandLine 'git', 'reset','--hard',commit
                        workingDir projectDir
                        ignoreExitValue true
                    }
                }
                else{
                    exec {

                        commandLine 'git', 'diff', prevCommit, commit
                        workingDir projectDir
                        standardOutput = outputStream
                    }
                    diffResult = outputStream.toString()
                    exec {
                        commandLine 'git', 'reset','--hard', prevCommit
                        workingDir projectDir
                        ignoreExitValue true
                    }

                }

                try {
                    exec {
                        workingDir projectDir
                        commandLine 'cmd', '/c', 'gradlew', 'compileJava'
                    }
                    success = true
                } catch (Exception e) {
                    println "Compile error: ${e.message}"
                    success = false
                }
                if (!success) {
                    println "Failed to compile project, retrying..."
                    commit = prevCommit
                    prevCommit += '^'



                }


                else {
                    println "Project compiled successfully, diff in ${diffFile}"
                    successfullyLoaded = true
                    def outputFile = new File("diff.txt")
                    outputFile.write(diffResult)
                }

            }


        }
        else{
            println "Project compiled successfully, no need to load previous revision"

        }
    }
}

tasks.register('doc_task') {
    doLast {
        def manifestContent = new StringBuilder()
        fileTree(dir: '${projectDir}/src/main/java').visit { FileVisitDetails details ->
            if (!details.directory) {
                def md5 = MessageDigest.getInstance('MD5')
                def sha1 = MessageDigest.getInstance('SHA-1')
                details.file.withInputStream { is ->
                    byte[] buffer = new byte[1024]
                    int read = 0
                    while ((read = is.read(buffer)) != -1) {
                        md5.update(buffer, 0, read)
                        sha1.update(buffer, 0, read)
                    }
                }
                manifestContent.append(details.relativePath)
                        .append(' MD5: ')
                        .append(md5.digest().collect { String.format('%02x', it) }.join())
                        .append(' SHA-1: ')
                        .append(sha1.digest().collect { String.format('%02x', it) }.join())
                        .append('\n')
            }
        }
        file('src/main/resources/META-INF/MANIFEST.MF').text = manifestContent.toString()

        def javadocDir = file("${buildDir}/docs/javadoc")
        javadocDir.mkdirs()
        exec {
            commandLine 'javadoc', '-d', javadocDir, '-sourcepath', '${projectDir}/src/main/java', '-subpackages', '.'
        }
    }
}

tasks.register('team') {
    doLast {
        def revisions = ['HEAD~1', 'HEAD~2']
        revisions.each { revision ->
            exec {
                commandLine 'git', 'checkout', revision
            }

            exec {
                commandLine 'gradle', 'build'
            }
        }

        exec {
            commandLine 'git', 'checkout', 'master'
        }

        tasks.register('zipJars', org.gradle.api.tasks.bundling.Zip) {
            from 'build/libs'
            archiveFileName.set('archive.zip')
            destinationDir = file('build') }
    }
}

tasks.register('javadoc_task', Javadoc) {
    group = 'documentation'
    dependsOn 'compile'

    source = sourceSets.main.allJava
    destinationDir = file("$buildDir/docs/javadoc")
    classpath = sourceSets.main.compileClasspath

    options {
        encoding = 'UTF-8'
        charSet = 'UTF-8'
        links("https://docs.oracle.com/en/java/javase/22/docs/api/")
        addStringOption('Xdoclint:none', '-quiet')
    }
}

tasks.register('md5sha1') {
    group = 'build'
    description = 'MD5 и SHA-1 хеш-суммы'
    dependsOn 'jar'
    doLast {
        def jarFile = file("build/libs/${project.name}.jar")
        if (!jarFile.exists()) {
            throw new FileNotFoundException("JAR file not found: ${jarFile.absolutePath}")
        }

        def md5 = MessageDigest.getInstance("MD5")
        def sha1 = MessageDigest.getInstance("SHA-1")

        jarFile.withInputStream { input ->
            byte[] buffer = new byte[8192]
            int bytesRead
            while ((bytesRead = input.read(buffer)) != -1) {
                md5.update(buffer, 0, bytesRead)
                sha1.update(buffer, 0, bytesRead)
            }
        }

        def md5Hex = md5.digest().encodeHex().toString()
        def sha1Hex = sha1.digest().encodeHex().toString()

        def manifestFile = file("src/main/resources/META-INF/MANIFEST.MF")
        manifestFile.parentFile.mkdirs()
        manifestFile.withWriterAppend { writer ->
            writer.println("MD5-Digest: ${md5Hex}")
            writer.println("SHA1-Digest: ${sha1Hex}")
        }
    }
}

tasks.named('jar', Jar) {
    dependsOn 'javadoc_task'
    from("${buildDir}/javadoc") {
        into 'javadoc'
    }
}

tasks.register('doc') {
    group = 'documentation'
    dependsOn 'javadoc_task', 'md5sha1'
}


tasks.register('native2ascii') {
    group = 'internationalization'

    doLast {
        def sourceDir = project.file('src/main/resources')
        def targetDir = project.file('build/native2ascii')

        targetDir.mkdirs()

        sourceDir.eachDir { dir ->
            def targetSubDir = new File(targetDir, dir.name)
            targetSubDir.mkdirs()

            dir.eachFile { file ->
                def targetFile = new File(targetSubDir, file.name)

                def content = Files.readAllLines(file.toPath(), StandardCharsets.UTF_8).join('\n')

                def asciiContent = Base64.getEncoder().encodeToString(content.getBytes(StandardCharsets.UTF_8))

                Files.write(targetFile.toPath(), asciiContent.getBytes(StandardCharsets.UTF_8))
            }
        }

        println "Complete: ${targetDir}"
    }
}

tasks.register('alt', Jar) {
    group = 'opi'
    description = 'Creates an alternative version of the program.'

    def baseDir = file('src/main/java')
    def altDir = file("$buildDir/altJava")

    copy {
        from baseDir
        into altDir
    }

    fileTree(altDir).matching {
        include '**/AreaChecker.java'
    }.each { file ->
        def newFileName = file.path.replace(
                'AreaChecker.java', 'AreaCheckerAlt.java')
        file.renameTo(new File(newFileName))
    }

    def messagesFile = file(
            "$altDir/checkers/AreaChecker.java")
    messagesFile.delete()

    fileTree(altDir).each { file ->
        file.text = file.text.replaceAll(
                ' hit ', ' Althit ')
    }

    archiveFileName.set("Lab3_ALT.jar")
    from altDir
}
